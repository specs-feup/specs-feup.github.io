# Workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4

      - name: Checkout main repo
        uses: actions/checkout@v4

      #- name: Install jq
      #  run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read project list from package.json
        id: project-list
        run: |
          echo "Reading projects from package.json"
          # Extracts the list of project paths from the 'workspaces' array
          # in the package.json and stores them in a multi-line string output.
          PROJECTS=$(jq -r '.workspaces[]' package.json)
          echo "$PROJECTS" | while read -r project; do
            echo "::add-mask::$project"
          done
          echo "projects<<EOF" >> $GITHUB_OUTPUT
          echo "$PROJECTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Checkout dependencies
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPOS=(
            "specs-feup/lara-framework"
            "specs-feup/clava"
            "specs-feup/kadabra@kadabra-js"
            "specs-feup/alpakka"
            "specs-feup/flow"
            "specs-feup/clava-flow"
            "specs-feup/clava-misra"
            "specs-feup/clava-lite-benchmarks"
            "specs-feup/clava-code-transforms"
            "specs-feup/extended-task-graph"
            "specs-feup/clava-vitis-integration"
            "specs-feup/hoopa"
          )

          for repo_entry in "${REPOS[@]}"; do
            if [[ "$repo_entry" == *"@"* ]]; then
              IFS='@' read -r repo ref <<< "$repo_entry"
              repo_name=$(basename "$repo")
              echo "Cloning $repo at ref $ref into $repo_name"
              git clone --depth 1 --branch "$ref" "https://x-access-token:${GH_TOKEN}@github.com/$repo.git" "$repo_name"
            else
              repo_name=$(basename "$repo_entry")
              echo "Cloning $repo_entry into $repo_name"
              git clone --depth 1 "https://x-access-token:${GH_TOKEN}@github.com/$repo_entry.git" "$repo_name"
            fi
          done

      - name: Build all projects
        run: |
          npm install

          echo "${{ steps.project-list.outputs.projects }}" | while read -r proj; do
            echo "Building $proj"
            (cd "$proj" && npm run build)
          done

          echo "Building documentation"
          npm run docs

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Select upload folder in repository
          path: './docs'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
